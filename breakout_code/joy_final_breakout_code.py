# -*- coding: utf-8 -*-
"""final_breakout_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tVLsH2Orw_-GY_NkS8b-YJ_im8MxC1zx
"""

pip install stable-baselines3[extra]
pip install gymnasium

import os
from stable_baselines3.common.callbacks import BaseCallback
from stable_baselines3.common import env_checker
from stable_baselines3.common.vec_env import VecFrameStack
from stable_baselines3.common.evaluation import evaluate_policy
from stable_baselines3.common.env_util import make_atari_env
from stable_baselines3 import DQN
import gymnasium as gym

class TrainAndSave(BaseCallback):
    def __init__(self, check_freq, save_path, verbose=1):
        super(TrainAndSave, self).__init__(verbose)
        self.check_freq = check_freq
        self.save_path = save_path

    def _init_callback(self):

        if self.save_path is not None:
            os.makedirs(self.save_path, exist_ok=True)

    def _on_step(self):
        if self.n_calls % self.check_freq == 0:
            model_path = os.path.join(self.save_path, f'best_model_{self.n_calls}')
            self.model.save(model_path)
        return True

CHECKPOINT_DIR = './train/'
LOG_DIR = './logs/'
window = 4
env = make_atari_env("ALE/Breakout-v5", n_envs=1, monitor_dir=LOG_DIR)
# Frame-stacking with 4 frames
vec_env = VecFrameStack(env, n_stack=window)

callback = TrainAndSave(check_freq=100000, save_path=CHECKPOINT_DIR)
newmodel = DQN('CnnPolicy', vec_env, tensorboard_log=LOG_DIR, verbose=1,
            buffer_size=50000, batch_size=128, learning_starts=10000, gamma=0.95,
            exploration_fraction = 0.3, exploration_final_eps=0.1)

newmodel.learn(total_timesteps=1000000, callback=callback, log_interval=1000)